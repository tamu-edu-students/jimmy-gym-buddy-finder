<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <%= csrf_meta_tags %>
  <title>Profile Swipe</title>
  
  <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
</head>
<body>

<% if FitnessProfile.where(user_id: @user.id).exists? %>
  <!-- User has a fitness profile -->
<% else %>
  <div class="alert alert-warning text-center w-100 mt-4">
    Please create a fitness profile to view other users.
  </div>
<% end %>
  <div class="container d-flex flex-column align-items-center mt-4">
    <!-- Search Filter -->
    <div class="w-100 mb-3 d-flex justify-content-center">
      <input type="text" id="search" class="form-control" style="width: 400px;" placeholder="Search Profiles" onkeyup="filterProfiles()" />
    </div>
    <!-- Tinder-like Cards -->
    <div class="profile-cards w-100 d-flex flex-column align-items-center">
      <% @prospective_users.each_with_index do |user, index| %>
         <% user_ = User.find_by(username: user['username']) %>
        <div class="profile-card card shadow mb-2" style="display:<%= index == 0 ? 'block' : 'none' %>;" data-user-id="<%= user['id'] %>">
        <% if user_.photo.attached? %>
          <%= image_tag user_.photo, class: "card-img-top", alt: user['username'] %>
        <% else %>
          <%= image_tag 'https://www.shutterstock.com/image-vector/default-avatar-profile-icon-social-600nw-1677509740.jpg', class: "card-img-top", alt: user['username'] %>
        <% end %>
          <div class="card-body text-center">
            <h5 class="card-title"><%= user['username'] %></h5>
            <p class="card-text">Age: <%= user['age'] %></p>
            <p class="card-text">Activities: <%= user['fitness_profile']['activities_with_experience'].split('|').map { |a| a.split(':').first }.join(', ') %></p>
          </div>
        </div>
      <% end %>
    </div>

    <!-- Action Buttons -->
    <div id="action-buttons" class="row justify-content-center mt-2 w-100">
      <div class="col-auto">
        <button class="btn btn-warning" onclick="handleAction('block')" title="Block">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="col-auto">
        <button class="btn btn-warning" onclick="handleAction('skip')" title="Skip">
          <i class="fas fa-ban"></i>
        </button>
      </div>
      <div class="col-auto">
        <button class="btn btn-warning" onclick="handleAction('like')" title="Like">
          <i class="fas fa-thumbs-up"></i>
        </button>
      </div>
    </div>
  </div>

  <!-- Custom Confirm Modal -->
  <%= render partial: 'shared/confirm_modal', locals: {
  title: 'Confirm Action',
  message: 'Are you sure you want to block this user?',
  cancel_text: 'Cancel',
  confirm_text: 'Yes, Block User'
} %>

  <!-- JavaScript for profile swipe functionality -->
  <script>
  document.addEventListener("turbo:load", function () {
    let currentCardIndex = 0;
    const cards = document.querySelectorAll(".profile-card");
    let availableCards = [...cards];

    function initializeCards() {
      cards.forEach((card, index) => {
        card.style.display = "none";
      });
      displayCurrentCard();
    }

    function displayCurrentCard() {
      const container = document.querySelector('.profile-cards');
      const actionButtons = document.getElementById('action-buttons');
      container.innerHTML = '<div class="alert alert-warning" style="display: none;">No profiles to display.</div>';
      
      if (availableCards.length > 0) {
        const currentCard = availableCards[currentCardIndex];
        container.appendChild(currentCard);
        currentCard.style.display = "block";
        actionButtons.style.display = "flex"; // Show buttons
      } else {
        container.querySelector('.alert').style.display = "block";
        actionButtons.style.display = "none"; // Hide buttons
      }
    }

    initializeCards();

    function animateCard(action) {
      const card = availableCards[currentCardIndex];
      if (!card) return;

      card.classList.add(`animate-${action}`);
      
      setTimeout(() => {
        card.classList.remove(`animate-${action}`);

        if (action !== 'skip') {
          // Remove the current card from availableCards for 'like' and 'block'
          availableCards.splice(currentCardIndex, 1);
        } else {
          // For 'skip', move the current card to the end of the array
          availableCards.push(availableCards.splice(currentCardIndex, 1)[0]);
        }

        // Move to next card, wrapping around if necessary
        currentCardIndex = currentCardIndex % availableCards.length;
        displayCurrentCard();
      }, 500); // Time to match CSS transition duration
    }

    window.handleAction = function (action) {
      const card = availableCards[currentCardIndex];
      if (!card) return;

      const userId = <%= @user_id %>;
      const prospectiveUserId = card.dataset.userId;

      let url;
      let method;

      switch (action) {
        case 'like':
          url = `/users/${userId}/match/${prospectiveUserId}`;
          method = 'GET';
          performAction(url, method, action);
          break;
        case 'skip':
          url = `/users/${userId}/skip/${prospectiveUserId}`;
          method = 'POST';
          performAction(url, method, action);
          break;
        case 'block':
          // Show the modal for the block action
          const modalElement = document.getElementById('customConfirmModal');
          const modal = new bootstrap.Modal(modalElement);
          modal.show();
          
          break;
      }
    };

    function performAction(url, method, action) {
      fetch(url, { 
        method: method, 
        headers: { 
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
          'Content-Type': 'application/json'
        }
      })
        .then(response => response.json())
        .then(data => {
          console.log(data.message);
          animateCard(action);
        })
        .catch(error => console.error('Error:', error));
      
    }

    window.filterProfiles = function () {
      const searchTerm = document.getElementById("search").value.toLowerCase();
      availableCards = [...cards].filter(card => 
        card.innerText.toLowerCase().includes(searchTerm)
      );

      currentCardIndex = 0;
      displayCurrentCard();
    };

    document.getElementById('confirmAction').addEventListener('click', function() {
      const card = availableCards[currentCardIndex];
      const userId = <%= @user_id %>;
      const prospectiveUserId = card.dataset.userId;
      const url = `/users/${userId}/block/${prospectiveUserId}`;
      const method = 'POST';
      performAction(url, method, 'block');
      
      // Hide the modal after confirming
      modal.hide();  // Use hide() to close the modal
    });
  });
  
  </script>

  <!-- Bootstrap JS and dependencies -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@1.16.0/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

  <style>

      .container{
        padding: 0 12px !important;
      }

      .profile-cards {
      max-width: 400px;
      width: 100%;
      margin: 0 auto;
    }

    .profile-card {
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      border-radius: 10px;
      overflow: hidden;
      width: 100%;
      max-height: 350px;
      height: 350px;
      transition: transform 0.5s ease, opacity 0.5s ease;
    }

    .profile-card img {
      height: 70%;
      width: 100%;
      margin: 0;
      padding: 0;
      object-fit: fill;
    }

    .card-body {
      height: 30%;
      padding: 10px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      text-align: center;
    }

    .profile-card.animate-like {
      transform: translateX(100%);
      opacity: 0;
    }

    .profile-card.animate-skip {
      transform: translateX(-100%);
      opacity: 0;
    }

    .profile-card.animate-block {
      transform: translateX(-100%);
      opacity: 0;
    }

    .card-title, .card-text {
      margin-bottom: 5px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    
    .modal-backdrop {
      --bs-backdrop-zindex: 0 !important;
      z-index: 0 !important;
    }

    .modal-content {
      z-index: 0 !important;
    }

    .card-img-top {
      width: 100%; /* Ensure the image spans the width of the card */
      height: auto; /* Maintain aspect ratio */
      object-fit: cover; /* Cover the card area without stretching */
      max-height: 300px; /* Optional: Limit the height */
    }

  </style>
</body>
</html>